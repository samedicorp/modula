name: Samedicorp Modula Core Test
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
  shield:
    class: ShieldGeneratorUnit
  screenHud:
    class: ScreenUnit
    select: manual
handlers:
  unit:
    onStart:
      lua: |
        local devMode = true --export: Use locally installed scripts if present.
        local logging = true --export: Enable controller debug output.
        local logElements = true --export: Log all discovered elements.

        local modulaCore = {}
        if devMode then
            modulaCore = require('samedicorp.modula.core')
        end

        if not modulaCore then
            modulaCore = MODULE_core()
        end

        modula = { call = function() end }
        modula = modulaCore.new(system, library, player, construct, unit,
            { 
            logging = logging, 
            logElements = logElements, 
            devMode = devMode,
            modules = {
                ["samedicorp.modula.modules.example"] = {}
            }
        })

        local failure = modula:call("onStart")
        if failure then
            error(failure)
        end

    onStop:
      lua:  local failure = modula:call("onStop"); if failure then error(failure) end
    tick(timerId):
      lua:  local failure = modula:call("onTick", timerId); if failure then error(failure) end
  system:
    actionStart(action):
      lua:  local failure = modula:call("onActionStart", action); if failure then error(failure) end
    actionStop(action):
      lua:  local failure = modula:call("onActionStop", action); if failure then error(failure) end
    actionLoop(action):
      lua:  local failure = modula:call("onActionLoop", action); if failure then error(failure) end
    onUpdate:
      lua:  local failure = modula:call("onUpdate"); if failure then error(failure) end
    onFlush:
      lua:  local failure = modula:call("onFlush"); if failure then error(failure) end
    inputText(text):
      lua:  local failure = modula:call("onInput", text); if failure then error(failure) end
  library:
    onStart:
      lua:  -- packed code goes here