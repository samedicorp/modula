name: %s
slots:
  core:
    class: CoreUnit
handlers:
  unit:
    onStart:
      lua: |
        %s

        -- Modula auto-generated code begins here.
        local modulaCore
        if devMode then
            modulaCore = require('samedicorp.modula.core')
        end

        if not modulaCore then
            modulaCore = MODULE_core()
        else
            system.print(modulaSettings.name .. " using local development version.")
        end

        modula = { call = function() end }
        modula = modulaCore.new(system, library, player, construct, unit, modulaSettings)

        local failure = modula:call("onStart")
        if failure then
            error(failure)
        end

    onStop:
      lua:  local failure = modula:call("onStop"); if failure then error(failure) end
    tick(timerId):
      lua:  local failure = modula:call("onTick", timerId); if failure then error(failure) end
  system:
    actionStart(action):
      lua:  local failure = modula:call("onActionStart", action); if failure then error(failure) end
    actionStop(action):
      lua:  local failure = modula:call("onActionStop", action); if failure then error(failure) end
    actionLoop(action):
      lua:  local failure = modula:call("onActionLoop", action); if failure then error(failure) end
    onUpdate:
      lua:  local failure = modula:call("onUpdate"); if failure then error(failure) end
    onFlush:
      lua:  local failure = modula:call("onFlush"); if failure then error(failure) end
    inputText(text):
      lua:  local failure = modula:call("onInput", text); if failure then error(failure) end
  library:
    onStart:
      lua:  |
        %s